// Code generated by mockery v2.34.2. DO NOT EDIT.

package service

import (
	model "chi-demo/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockProductService is an autogenerated mock type for the ProductService type
type MockProductService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, product
func (_m *MockProductService) Create(ctx context.Context, product model.Product) error {
	ret := _m.Called(ctx, product)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Product) error); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockProductService) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *MockProductService) GetAll(ctx context.Context) ([]model.Product, error) {
	ret := _m.Called(ctx)

	var r0 []model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Product, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOne provides a mock function with given fields: ctx, id
func (_m *MockProductService) GetOne(ctx context.Context, id int64) (model.Product, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (model.Product, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.Product); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockProductService creates a new instance of MockProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductService {
	mock := &MockProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
